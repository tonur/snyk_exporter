/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`list_group_audit_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListGroupAuditLogsError {
    Status400(crate::models::GetCustomBaseImages400Response),
    Status401(crate::models::GetCustomBaseImages400Response),
    Status403(crate::models::GetCustomBaseImages400Response),
    Status404(crate::models::GetCustomBaseImages400Response),
    Status500(crate::models::GetCustomBaseImages400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_org_audit_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOrgAuditLogsError {
    Status400(crate::models::GetCustomBaseImages400Response),
    Status401(crate::models::GetCustomBaseImages400Response),
    Status403(crate::models::GetCustomBaseImages400Response),
    Status404(crate::models::GetCustomBaseImages400Response),
    Status500(crate::models::GetCustomBaseImages400Response),
    UnknownValue(serde_json::Value),
}


/// Search audit logs for a Group. Some Organization level events are supported as well as the following Group level events:   - api.access   - group.cloud_config.settings.edit   - group.create   - group.delete   - group.edit   - group.notification_settings.edit   - group.org.add   - group.org.remove   - group.policy.create   - group.policy.delete   - group.policy.edit   - group.request_access_settings.edit   - group.role.create   - group.role.delete   - group.role.edit   - group.service_account.create   - group.service_account.delete   - group.service_account.edit   - group.settings.edit   - group.settings.feature_flag.edit   - group.sso.add   - group.sso.auth0_connection.create   - group.sso.auth0_connection.edit   - group.sso.create   - group.sso.delete   - group.sso.edit   - group.sso.membership.sync   - group.sso.remove   - group.tag.create   - group.tag.delete   - group.user.add   - group.user.remove   - group.user.role.edit 
pub async fn list_group_audit_logs(configuration: &configuration::Configuration, version: &str, group_id: &str, cursor: Option<&str>, from: Option<String>, to: Option<String>, size: Option<i32>, sort_order: Option<&str>, user_id: Option<&str>, project_id: Option<&str>, event: Option<&str>, exclude_event: Option<&str>) -> Result<crate::models::ListGroupAuditLogs200Response, Error<ListGroupAuditLogsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/groups/{group_id}/audit_logs/search", local_var_configuration.base_path, group_id=crate::apis::urlencode(group_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("version", &version.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to {
        local_var_req_builder = local_var_req_builder.query(&[("to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = size {
        local_var_req_builder = local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_order {
        local_var_req_builder = local_var_req_builder.query(&[("sort_order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = project_id {
        local_var_req_builder = local_var_req_builder.query(&[("project_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = event {
        local_var_req_builder = local_var_req_builder.query(&[("event", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_event {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_event", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListGroupAuditLogsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Search audit logs for an Organization. Supported event types:   - api.access   - org.app_bot.create   - org.app.create   - org.app.delete   - org.app.edit   - org.cloud_config.settings.edit   - org.collection.create   - org.collection.delete   - org.collection.edit   - org.create   - org.delete   - org.edit   - org.ignore_policy.edit   - org.integration.create   - org.integration.delete   - org.integration.edit   - org.integration.settings.edit   - org.language_settings.edit   - org.notification_settings.edit   - org.org_source.create   - org.org_source.delete   - org.org_source.edit   - org.policy.edit   - org.project_filter.create   - org.project_filter.delete   - org.project.add   - org.project.attributes.edit   - org.project.delete   - org.project.edit   - org.project.fix_pr.auto_open   - org.project.fix_pr.manual_open   - org.project.ignore.create   - org.project.ignore.delete   - org.project.ignore.edit   - org.project.monitor   - org.project.pr_check.edit   - org.project.remove   - org.project.settings.delete   - org.project.settings.edit   - org.project.stop_monitor   - org.project.tag.add   - org.project.tag.remove   - org.project.test   - org.request_access_settings.edit   - org.sast_settings.edit   - org.service_account.create   - org.service_account.delete   - org.service_account.edit   - org.settings.feature_flag.edit   - org.target.create   - org.target.delete   - org.user.add   - org.user.invite   - org.user.invite.accept   - org.user.invite.revoke   - org.user.invite_link.accept   - org.user.invite_link.create   - org.user.invite_link.revoke   - org.user.leave   - org.user.provision.accept   - org.user.provision.create   - org.user.provision.delete   - org.user.remove   - org.user.role.create   - org.user.role.delete   - org.user.role.details.edit   - org.user.role.edit   - org.user.role.permissions.edit   - org.webhook.add   - org.webhook.delete   - user.org.notification_settings.edit 
pub async fn list_org_audit_logs(configuration: &configuration::Configuration, version: &str, org_id: &str, cursor: Option<&str>, from: Option<String>, to: Option<String>, size: Option<i32>, sort_order: Option<&str>, user_id: Option<&str>, project_id: Option<&str>, event: Option<&str>, exclude_event: Option<&str>) -> Result<crate::models::ListGroupAuditLogs200Response, Error<ListOrgAuditLogsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/orgs/{org_id}/audit_logs/search", local_var_configuration.base_path, org_id=crate::apis::urlencode(org_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("version", &version.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = to {
        local_var_req_builder = local_var_req_builder.query(&[("to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = size {
        local_var_req_builder = local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_order {
        local_var_req_builder = local_var_req_builder.query(&[("sort_order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = project_id {
        local_var_req_builder = local_var_req_builder.query(&[("project_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = event {
        local_var_req_builder = local_var_req_builder.query(&[("event", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_event {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_event", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOrgAuditLogsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

