/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PullRequestsSettings : Settings which describe how pull requests for a project are tested.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestsSettings {
    /// Only fail when the issues found have a fix available.
    #[serde(rename = "fail_only_for_issues_with_fix", skip_serializing_if = "Option::is_none")]
    pub fail_only_for_issues_with_fix: Option<bool>,
    /// Fail if the project has any issues (\"all\"), or fail if a PR is introducing a new dependency with issues (\"only_new\"). If this value is unset, the setting is inherited from the org default.
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub policy: Option<Policy>,
    /// Only fail for issues greater than or equal to the specified severity. If this value is unset, the setting is inherited from the org default.
    #[serde(rename = "severity_threshold", skip_serializing_if = "Option::is_none")]
    pub severity_threshold: Option<SeverityThreshold>,
}

impl PullRequestsSettings {
    /// Settings which describe how pull requests for a project are tested.
    pub fn new() -> PullRequestsSettings {
        PullRequestsSettings {
            fail_only_for_issues_with_fix: None,
            policy: None,
            severity_threshold: None,
        }
    }
}

/// Fail if the project has any issues (\"all\"), or fail if a PR is introducing a new dependency with issues (\"only_new\"). If this value is unset, the setting is inherited from the org default.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Policy {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "only_new")]
    OnlyNew,
}

impl Default for Policy {
    fn default() -> Policy {
        Self::All
    }
}
/// Only fail for issues greater than or equal to the specified severity. If this value is unset, the setting is inherited from the org default.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SeverityThreshold {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for SeverityThreshold {
    fn default() -> SeverityThreshold {
        Self::Low
    }
}

