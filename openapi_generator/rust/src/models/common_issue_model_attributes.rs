/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommonIssueModelAttributes {
    #[serde(rename = "coordinates", skip_serializing_if = "Option::is_none")]
    pub coordinates: Option<Vec<crate::models::CommonIssueModelAttributesCoordinatesInner>>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// A description of the issue in Markdown format
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The type from enumeration of the issue’s severity level. This is usually set from the issue’s producer, but can be overridden by policies.
    #[serde(rename = "effective_severity_level", skip_serializing_if = "Option::is_none")]
    pub effective_severity_level: Option<EffectiveSeverityLevel>,
    /// The Snyk vulnerability ID.
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "problems", skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<crate::models::CommonIssueModelAttributesProblemsInner>>,
    /// The severity level of the vulnerability: ‘low’, ‘medium’, ‘high’ or ‘critical’.
    #[serde(rename = "severities", skip_serializing_if = "Option::is_none")]
    pub severities: Option<Vec<crate::models::Severity>>,
    #[serde(rename = "slots", skip_serializing_if = "Option::is_none")]
    pub slots: Option<Box<crate::models::Slots>>,
    /// A human-readable title for this issue.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The issue type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// When the vulnerability information was last modified.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl CommonIssueModelAttributes {
    pub fn new() -> CommonIssueModelAttributes {
        CommonIssueModelAttributes {
            coordinates: None,
            created_at: None,
            description: None,
            effective_severity_level: None,
            key: None,
            problems: None,
            severities: None,
            slots: None,
            title: None,
            r#type: None,
            updated_at: None,
        }
    }
}

/// The type from enumeration of the issue’s severity level. This is usually set from the issue’s producer, but can be overridden by policies.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EffectiveSeverityLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for EffectiveSeverityLevel {
    fn default() -> EffectiveSeverityLevel {
        Self::Info
    }
}

