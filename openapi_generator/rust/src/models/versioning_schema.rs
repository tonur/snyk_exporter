/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */

/// VersioningSchema : The versioning scheme used by images in the repository.  A versioning schema is a system for identifying and organizing different versions of a project.  It is used to track changes and updates to the project over time, and to help users identify which version they are using.  A versioning schema typically consists of a series of numbers or labels that are incremented to reflect the progression of versions.  For example, a versioning schema might use a series of numbers, such as \"1.0\", \"1.1\", \"2.0\", and so on, to indicate major and minor releases of a product.  A consistent and well-defined versioning schema helps users and tools understand and track the development of a project. 



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersioningSchema {
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The regular expression used to describe the format of tags. Keep in mind that backslashes in the expression need to be escaped due to being encompassed in a JSON string. 
    #[serde(rename = "expression")]
    pub expression: String,
    /// A customizable string that can be set for a custom versioning schema to describe its meaning. This label has no function. 
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Whether this image should be the recommendation. Only one image can be selected at a given time. Setting this as true will remove previous selection. 
    #[serde(rename = "is_selected")]
    pub is_selected: bool,
}

impl VersioningSchema {
    /// The versioning scheme used by images in the repository.  A versioning schema is a system for identifying and organizing different versions of a project.  It is used to track changes and updates to the project over time, and to help users identify which version they are using.  A versioning schema typically consists of a series of numbers or labels that are incremented to reflect the progression of versions.  For example, a versioning schema might use a series of numbers, such as \"1.0\", \"1.1\", \"2.0\", and so on, to indicate major and minor releases of a product.  A consistent and well-defined versioning schema helps users and tools understand and track the development of a project. 
    pub fn new(r#type: Type, expression: String, is_selected: bool) -> VersioningSchema {
        VersioningSchema {
            r#type,
            expression,
            label: None,
            is_selected,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "single-selection")]
    SingleSelection,
}

impl Default for Type {
    fn default() -> Type {
        Self::SingleSelection
    }
}

