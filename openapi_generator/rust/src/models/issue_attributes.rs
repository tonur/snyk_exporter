/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IssueAttributes : issue attributes



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueAttributes {
    /// A list of details for weakness data, policy, etc that are the class of this issue's source.
    #[serde(rename = "classes", skip_serializing_if = "Option::is_none")]
    pub classes: Option<Vec<crate::models::Class>>,
    /// Where the issue originated, specific to issue type. Details on what code, package, etc introduced the issue. An issue may be caused by more than one coordinate. 
    #[serde(rename = "coordinates", skip_serializing_if = "Option::is_none")]
    pub coordinates: Option<Vec<crate::models::Coordinate>>,
    /// The creation time of this issue.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// A markdown-formatted optional description of this issue. Links are not permitted.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The computed effective severity of this issue. This is either the highest level from all included severities, or an overridden value set via group level policy. 
    #[serde(rename = "effective_severity_level")]
    pub effective_severity_level: EffectiveSeverityLevel,
    /// A flag indicating if the issue is being ignored. Derived from the issue's ignore, which provides more details.
    #[serde(rename = "ignored")]
    pub ignored: bool,
    /// An opaque key used for uniquely identifying this issue across test runs, within a project.
    #[serde(rename = "key")]
    pub key: String,
    /// A list of details for vulnerability data, policy, etc that are the source of this issue.
    #[serde(rename = "problems", skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<crate::models::Problem>>,
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<Box<crate::models::Resolution>>,
    #[serde(rename = "risk", skip_serializing_if = "Option::is_none")]
    pub risk: Option<Box<crate::models::Risk>>,
    /// The issue's status. Derived from the issue's resolution, which provides more details.
    #[serde(rename = "status")]
    pub status: Status,
    /// A human-readable title for this issue.
    #[serde(rename = "title")]
    pub title: String,
    /// An opaque identifier for corelating across test runs.
    #[serde(rename = "tool", skip_serializing_if = "Option::is_none")]
    pub tool: Option<String>,
    #[serde(rename = "type")]
    pub r#type: crate::models::TypeDef,
    /// The time when this issue was last modified.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl IssueAttributes {
    /// issue attributes
    pub fn new(created_at: String, effective_severity_level: EffectiveSeverityLevel, ignored: bool, key: String, status: Status, title: String, r#type: crate::models::TypeDef, updated_at: String) -> IssueAttributes {
        IssueAttributes {
            classes: None,
            coordinates: None,
            created_at,
            description: None,
            effective_severity_level,
            ignored,
            key,
            problems: None,
            resolution: None,
            risk: None,
            status,
            title,
            tool: None,
            r#type,
            updated_at,
        }
    }
}

/// The computed effective severity of this issue. This is either the highest level from all included severities, or an overridden value set via group level policy. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EffectiveSeverityLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for EffectiveSeverityLevel {
    fn default() -> EffectiveSeverityLevel {
        Self::Info
    }
}
/// The issue's status. Derived from the issue's resolution, which provides more details.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "resolved")]
    Resolved,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}

