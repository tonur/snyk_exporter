/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Platform {
    #[serde(rename = "aix/ppc64")]
    AixSlashPpc64,
    #[serde(rename = "android/386")]
    AndroidSlash386,
    #[serde(rename = "android/amd64")]
    AndroidSlashAmd64,
    #[serde(rename = "android/arm")]
    AndroidSlashArm,
    #[serde(rename = "android/arm/v5")]
    AndroidSlashArmSlashV5,
    #[serde(rename = "android/arm/v6")]
    AndroidSlashArmSlashV6,
    #[serde(rename = "android/arm/v7")]
    AndroidSlashArmSlashV7,
    #[serde(rename = "android/arm64")]
    AndroidSlashArm64,
    #[serde(rename = "android/arm64/v8")]
    AndroidSlashArm64SlashV8,
    #[serde(rename = "darwin/amd64")]
    DarwinSlashAmd64,
    #[serde(rename = "darwin/arm")]
    DarwinSlashArm,
    #[serde(rename = "darwin/arm/v5")]
    DarwinSlashArmSlashV5,
    #[serde(rename = "darwin/arm/v6")]
    DarwinSlashArmSlashV6,
    #[serde(rename = "darwin/arm/v7")]
    DarwinSlashArmSlashV7,
    #[serde(rename = "darwin/arm64")]
    DarwinSlashArm64,
    #[serde(rename = "darwin/arm64/v8")]
    DarwinSlashArm64SlashV8,
    #[serde(rename = "dragonfly/amd64")]
    DragonflySlashAmd64,
    #[serde(rename = "freebsd/386")]
    FreebsdSlash386,
    #[serde(rename = "freebsd/amd64")]
    FreebsdSlashAmd64,
    #[serde(rename = "freebsd/arm")]
    FreebsdSlashArm,
    #[serde(rename = "freebsd/arm/v5")]
    FreebsdSlashArmSlashV5,
    #[serde(rename = "freebsd/arm/v6")]
    FreebsdSlashArmSlashV6,
    #[serde(rename = "freebsd/arm/v7")]
    FreebsdSlashArmSlashV7,
    #[serde(rename = "illumos/amd64")]
    IllumosSlashAmd64,
    #[serde(rename = "ios/arm64")]
    IosSlashArm64,
    #[serde(rename = "ios/arm64/v8")]
    IosSlashArm64SlashV8,
    #[serde(rename = "js/wasm")]
    JsSlashWasm,
    #[serde(rename = "linux/386")]
    LinuxSlash386,
    #[serde(rename = "linux/amd64")]
    LinuxSlashAmd64,
    #[serde(rename = "linux/arm")]
    LinuxSlashArm,
    #[serde(rename = "linux/arm/v5")]
    LinuxSlashArmSlashV5,
    #[serde(rename = "linux/arm/v6")]
    LinuxSlashArmSlashV6,
    #[serde(rename = "linux/arm/v7")]
    LinuxSlashArmSlashV7,
    #[serde(rename = "linux/arm64")]
    LinuxSlashArm64,
    #[serde(rename = "linux/arm64/v8")]
    LinuxSlashArm64SlashV8,
    #[serde(rename = "linux/loong64")]
    LinuxSlashLoong64,
    #[serde(rename = "linux/mips")]
    LinuxSlashMips,
    #[serde(rename = "linux/mipsle")]
    LinuxSlashMipsle,
    #[serde(rename = "linux/mips64")]
    LinuxSlashMips64,
    #[serde(rename = "linux/mips64le")]
    LinuxSlashMips64le,
    #[serde(rename = "linux/ppc64")]
    LinuxSlashPpc64,
    #[serde(rename = "linux/ppc64le")]
    LinuxSlashPpc64le,
    #[serde(rename = "linux/riscv64")]
    LinuxSlashRiscv64,
    #[serde(rename = "linux/s390x")]
    LinuxSlashS390x,
    #[serde(rename = "linux/x86_64")]
    LinuxSlashX8664,
    #[serde(rename = "netbsd/386")]
    NetbsdSlash386,
    #[serde(rename = "netbsd/amd64")]
    NetbsdSlashAmd64,
    #[serde(rename = "netbsd/arm")]
    NetbsdSlashArm,
    #[serde(rename = "netbsd/arm/v5")]
    NetbsdSlashArmSlashV5,
    #[serde(rename = "netbsd/arm/v6")]
    NetbsdSlashArmSlashV6,
    #[serde(rename = "netbsd/arm/v7")]
    NetbsdSlashArmSlashV7,
    #[serde(rename = "openbsd/386")]
    OpenbsdSlash386,
    #[serde(rename = "openbsd/amd64")]
    OpenbsdSlashAmd64,
    #[serde(rename = "openbsd/arm")]
    OpenbsdSlashArm,
    #[serde(rename = "openbsd/arm/v5")]
    OpenbsdSlashArmSlashV5,
    #[serde(rename = "openbsd/arm/v6")]
    OpenbsdSlashArmSlashV6,
    #[serde(rename = "openbsd/arm/v7")]
    OpenbsdSlashArmSlashV7,
    #[serde(rename = "openbsd/arm64")]
    OpenbsdSlashArm64,
    #[serde(rename = "openbsd/arm64/v8")]
    OpenbsdSlashArm64SlashV8,
    #[serde(rename = "plan9/386")]
    Plan9Slash386,
    #[serde(rename = "plan9/amd64")]
    Plan9SlashAmd64,
    #[serde(rename = "plan9/arm")]
    Plan9SlashArm,
    #[serde(rename = "plan9/arm/v5")]
    Plan9SlashArmSlashV5,
    #[serde(rename = "plan9/arm/v6")]
    Plan9SlashArmSlashV6,
    #[serde(rename = "plan9/arm/v7")]
    Plan9SlashArmSlashV7,
    #[serde(rename = "solaris/amd64")]
    SolarisSlashAmd64,
    #[serde(rename = "windows/386")]
    WindowsSlash386,
    #[serde(rename = "windows/amd64")]
    WindowsSlashAmd64,
    #[serde(rename = "windows/arm")]
    WindowsSlashArm,
    #[serde(rename = "windows/arm/v5")]
    WindowsSlashArmSlashV5,
    #[serde(rename = "windows/arm/v6")]
    WindowsSlashArmSlashV6,
    #[serde(rename = "windows/arm/v7")]
    WindowsSlashArmSlashV7,
    #[serde(rename = "windows/arm64")]
    WindowsSlashArm64,
    #[serde(rename = "windows/arm64/v8")]
    WindowsSlashArm64SlashV8,

}

impl ToString for Platform {
    fn to_string(&self) -> String {
        match self {
            Self::AixSlashPpc64 => String::from("aix/ppc64"),
            Self::AndroidSlash386 => String::from("android/386"),
            Self::AndroidSlashAmd64 => String::from("android/amd64"),
            Self::AndroidSlashArm => String::from("android/arm"),
            Self::AndroidSlashArmSlashV5 => String::from("android/arm/v5"),
            Self::AndroidSlashArmSlashV6 => String::from("android/arm/v6"),
            Self::AndroidSlashArmSlashV7 => String::from("android/arm/v7"),
            Self::AndroidSlashArm64 => String::from("android/arm64"),
            Self::AndroidSlashArm64SlashV8 => String::from("android/arm64/v8"),
            Self::DarwinSlashAmd64 => String::from("darwin/amd64"),
            Self::DarwinSlashArm => String::from("darwin/arm"),
            Self::DarwinSlashArmSlashV5 => String::from("darwin/arm/v5"),
            Self::DarwinSlashArmSlashV6 => String::from("darwin/arm/v6"),
            Self::DarwinSlashArmSlashV7 => String::from("darwin/arm/v7"),
            Self::DarwinSlashArm64 => String::from("darwin/arm64"),
            Self::DarwinSlashArm64SlashV8 => String::from("darwin/arm64/v8"),
            Self::DragonflySlashAmd64 => String::from("dragonfly/amd64"),
            Self::FreebsdSlash386 => String::from("freebsd/386"),
            Self::FreebsdSlashAmd64 => String::from("freebsd/amd64"),
            Self::FreebsdSlashArm => String::from("freebsd/arm"),
            Self::FreebsdSlashArmSlashV5 => String::from("freebsd/arm/v5"),
            Self::FreebsdSlashArmSlashV6 => String::from("freebsd/arm/v6"),
            Self::FreebsdSlashArmSlashV7 => String::from("freebsd/arm/v7"),
            Self::IllumosSlashAmd64 => String::from("illumos/amd64"),
            Self::IosSlashArm64 => String::from("ios/arm64"),
            Self::IosSlashArm64SlashV8 => String::from("ios/arm64/v8"),
            Self::JsSlashWasm => String::from("js/wasm"),
            Self::LinuxSlash386 => String::from("linux/386"),
            Self::LinuxSlashAmd64 => String::from("linux/amd64"),
            Self::LinuxSlashArm => String::from("linux/arm"),
            Self::LinuxSlashArmSlashV5 => String::from("linux/arm/v5"),
            Self::LinuxSlashArmSlashV6 => String::from("linux/arm/v6"),
            Self::LinuxSlashArmSlashV7 => String::from("linux/arm/v7"),
            Self::LinuxSlashArm64 => String::from("linux/arm64"),
            Self::LinuxSlashArm64SlashV8 => String::from("linux/arm64/v8"),
            Self::LinuxSlashLoong64 => String::from("linux/loong64"),
            Self::LinuxSlashMips => String::from("linux/mips"),
            Self::LinuxSlashMipsle => String::from("linux/mipsle"),
            Self::LinuxSlashMips64 => String::from("linux/mips64"),
            Self::LinuxSlashMips64le => String::from("linux/mips64le"),
            Self::LinuxSlashPpc64 => String::from("linux/ppc64"),
            Self::LinuxSlashPpc64le => String::from("linux/ppc64le"),
            Self::LinuxSlashRiscv64 => String::from("linux/riscv64"),
            Self::LinuxSlashS390x => String::from("linux/s390x"),
            Self::LinuxSlashX8664 => String::from("linux/x86_64"),
            Self::NetbsdSlash386 => String::from("netbsd/386"),
            Self::NetbsdSlashAmd64 => String::from("netbsd/amd64"),
            Self::NetbsdSlashArm => String::from("netbsd/arm"),
            Self::NetbsdSlashArmSlashV5 => String::from("netbsd/arm/v5"),
            Self::NetbsdSlashArmSlashV6 => String::from("netbsd/arm/v6"),
            Self::NetbsdSlashArmSlashV7 => String::from("netbsd/arm/v7"),
            Self::OpenbsdSlash386 => String::from("openbsd/386"),
            Self::OpenbsdSlashAmd64 => String::from("openbsd/amd64"),
            Self::OpenbsdSlashArm => String::from("openbsd/arm"),
            Self::OpenbsdSlashArmSlashV5 => String::from("openbsd/arm/v5"),
            Self::OpenbsdSlashArmSlashV6 => String::from("openbsd/arm/v6"),
            Self::OpenbsdSlashArmSlashV7 => String::from("openbsd/arm/v7"),
            Self::OpenbsdSlashArm64 => String::from("openbsd/arm64"),
            Self::OpenbsdSlashArm64SlashV8 => String::from("openbsd/arm64/v8"),
            Self::Plan9Slash386 => String::from("plan9/386"),
            Self::Plan9SlashAmd64 => String::from("plan9/amd64"),
            Self::Plan9SlashArm => String::from("plan9/arm"),
            Self::Plan9SlashArmSlashV5 => String::from("plan9/arm/v5"),
            Self::Plan9SlashArmSlashV6 => String::from("plan9/arm/v6"),
            Self::Plan9SlashArmSlashV7 => String::from("plan9/arm/v7"),
            Self::SolarisSlashAmd64 => String::from("solaris/amd64"),
            Self::WindowsSlash386 => String::from("windows/386"),
            Self::WindowsSlashAmd64 => String::from("windows/amd64"),
            Self::WindowsSlashArm => String::from("windows/arm"),
            Self::WindowsSlashArmSlashV5 => String::from("windows/arm/v5"),
            Self::WindowsSlashArmSlashV6 => String::from("windows/arm/v6"),
            Self::WindowsSlashArmSlashV7 => String::from("windows/arm/v7"),
            Self::WindowsSlashArm64 => String::from("windows/arm64"),
            Self::WindowsSlashArm64SlashV8 => String::from("windows/arm64/v8"),
        }
    }
}

impl Default for Platform {
    fn default() -> Platform {
        Self::AixSlashPpc64
    }
}




