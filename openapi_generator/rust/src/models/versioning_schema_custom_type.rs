/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */

/// VersioningSchemaCustomType : The Custom Schema type is a way for Snyk to understand your company’s container image tag versioning scheme, enabling Snyk to give more accurate base image upgrade recommendations.  This schema type is essentially a regular expression that groups the different parts of an image’s tag into comparable sections.  If your container image's tags follow a versioning scheme other than Semantic Versioning (SemVer),  it is highly recommended that you select the \"Custom Versioning\" schema for your image repositories. 



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersioningSchemaCustomType {
    /// The regular expression used to describe the format of tags. Keep in mind that backslashes in the expression need to be escaped due to being encompassed in a JSON string. 
    #[serde(rename = "expression")]
    pub expression: String,
    /// A customizable string that can be set for a custom versioning schema to describe its meaning. This label has no function. 
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl VersioningSchemaCustomType {
    /// The Custom Schema type is a way for Snyk to understand your company’s container image tag versioning scheme, enabling Snyk to give more accurate base image upgrade recommendations.  This schema type is essentially a regular expression that groups the different parts of an image’s tag into comparable sections.  If your container image's tags follow a versioning scheme other than Semantic Versioning (SemVer),  it is highly recommended that you select the \"Custom Versioning\" schema for your image repositories. 
    pub fn new(expression: String, r#type: Type) -> VersioningSchemaCustomType {
        VersioningSchemaCustomType {
            expression,
            label: None,
            r#type,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Type {
    fn default() -> Type {
        Self::Custom
    }
}

