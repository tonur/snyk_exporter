/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchProjectRequestDataAttributes {
    #[serde(rename = "business_criticality", skip_serializing_if = "Option::is_none")]
    pub business_criticality: Option<Vec<BusinessCriticality>>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<Vec<Environment>>,
    #[serde(rename = "lifecycle", skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<Vec<Lifecycle>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::PatchProjectRequestDataAttributesTagsInner>>,
    /// Test frequency of a project. Also controls when automated PRs may be created.
    #[serde(rename = "test_frequency", skip_serializing_if = "Option::is_none")]
    pub test_frequency: Option<TestFrequency>,
}

impl PatchProjectRequestDataAttributes {
    pub fn new() -> PatchProjectRequestDataAttributes {
        PatchProjectRequestDataAttributes {
            business_criticality: None,
            environment: None,
            lifecycle: None,
            tags: None,
            test_frequency: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BusinessCriticality {
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "low")]
    Low,
}

impl Default for BusinessCriticality {
    fn default() -> BusinessCriticality {
        Self::Critical
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Environment {
    #[serde(rename = "frontend")]
    Frontend,
    #[serde(rename = "backend")]
    Backend,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "external")]
    External,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "saas")]
    Saas,
    #[serde(rename = "onprem")]
    Onprem,
    #[serde(rename = "hosted")]
    Hosted,
    #[serde(rename = "distributed")]
    Distributed,
}

impl Default for Environment {
    fn default() -> Environment {
        Self::Frontend
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Lifecycle {
    #[serde(rename = "production")]
    Production,
    #[serde(rename = "development")]
    Development,
    #[serde(rename = "sandbox")]
    Sandbox,
}

impl Default for Lifecycle {
    fn default() -> Lifecycle {
        Self::Production
    }
}
/// Test frequency of a project. Also controls when automated PRs may be created.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TestFrequency {
    #[serde(rename = "daily")]
    Daily,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "never")]
    Never,
}

impl Default for TestFrequency {
    fn default() -> TestFrequency {
        Self::Daily
    }
}

