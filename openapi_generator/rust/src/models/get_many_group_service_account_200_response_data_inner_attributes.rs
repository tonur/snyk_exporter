/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetManyGroupServiceAccount200ResponseDataInnerAttributes {
    /// The time, in seconds, that a generated access token will be valid for. Defaults to 1hr if unset. Only provided when auth_type is oauth_private_key_jwt.
    #[serde(rename = "access_token_ttl_seconds", skip_serializing_if = "Option::is_none")]
    pub access_token_ttl_seconds: Option<f32>,
    /// The Snyk API Key for this service account. Only returned on creation, and only when auth_type is api_key.
    #[serde(rename = "api_key", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<String>,
    /// The authentication strategy for the service account:   * api_key - Regular Snyk API Key.   * oauth_client_secret - OAuth2 client_credentials grant, which returns a client secret that can be used to retrieve an access token.   * oauth_private_key_jwt - OAuth2 client_credentials grant, using private_key_jwt client_assertion as laid out OIDC Connect Core 1.0, section 9.
    #[serde(rename = "auth_type")]
    pub auth_type: AuthType,
    /// The service account's attached client-id. Used to request an access-token. Only provided when auth_type is oauth_private_key_jwt.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// The client secret used for obtaining access tokens. Only sent on creation of new service accounts and cannot be retrieved thereafter. Only provided when auth_type is oauth_client_secret.
    #[serde(rename = "client_secret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// A JWKs URL used to verify signed JWT requests against. Must be https. Only provided when auth_type is oauth_private_key_jwt.
    #[serde(rename = "jwks_url", skip_serializing_if = "Option::is_none")]
    pub jwks_url: Option<String>,
    /// The level of access for the service account:   * Group - the service account was created at the Group level.   * Org - the service account was created at the Org level.
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<Level>,
    /// A human-friendly name of the service account.
    #[serde(rename = "name")]
    pub name: String,
    /// The ID of the role which the Service Account is associated with.
    #[serde(rename = "role_id")]
    pub role_id: uuid::Uuid,
}

impl GetManyGroupServiceAccount200ResponseDataInnerAttributes {
    pub fn new(auth_type: AuthType, name: String, role_id: uuid::Uuid) -> GetManyGroupServiceAccount200ResponseDataInnerAttributes {
        GetManyGroupServiceAccount200ResponseDataInnerAttributes {
            access_token_ttl_seconds: None,
            api_key: None,
            auth_type,
            client_id: None,
            client_secret: None,
            jwks_url: None,
            level: None,
            name,
            role_id,
        }
    }
}

/// The authentication strategy for the service account:   * api_key - Regular Snyk API Key.   * oauth_client_secret - OAuth2 client_credentials grant, which returns a client secret that can be used to retrieve an access token.   * oauth_private_key_jwt - OAuth2 client_credentials grant, using private_key_jwt client_assertion as laid out OIDC Connect Core 1.0, section 9.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthType {
    #[serde(rename = "api_key")]
    ApiKey,
    #[serde(rename = "oauth_client_secret")]
    OauthClientSecret,
    #[serde(rename = "oauth_private_key_jwt")]
    OauthPrivateKeyJwt,
}

impl Default for AuthType {
    fn default() -> AuthType {
        Self::ApiKey
    }
}
/// The level of access for the service account:   * Group - the service account was created at the Group level.   * Org - the service account was created at the Org level.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "Group")]
    Group,
    #[serde(rename = "Org")]
    Org,
}

impl Default for Level {
    fn default() -> Level {
        Self::Group
    }
}

